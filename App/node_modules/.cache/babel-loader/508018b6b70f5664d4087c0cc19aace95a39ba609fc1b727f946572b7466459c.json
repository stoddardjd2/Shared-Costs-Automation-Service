{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jared\\\\programming\\\\professional\\\\shared-costs\\\\App\\\\src\\\\contexts\\\\DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, createContext, useContext } from 'react';\nimport { plaidAPI } from '../services/plaidService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [participants, setParticipants] = useState([{\n    id: 1,\n    name: 'John Doe',\n    email: 'john@example.com',\n    avatar: 'JD'\n  }, {\n    id: 2,\n    name: 'Jane Smith',\n    email: 'jane@example.com',\n    avatar: 'JS'\n  }, {\n    id: 3,\n    name: 'Mike Johnson',\n    email: 'mike@example.com',\n    avatar: 'MJ'\n  }, {\n    id: 4,\n    name: 'Sarah Wilson',\n    email: 'sarah@example.com',\n    avatar: 'SW'\n  }]);\n  const [costs, setCosts] = useState([{\n    id: 1,\n    name: 'Netflix Subscription',\n    amount: 15.99,\n    isRecurring: true,\n    plaidMatch: 'Netflix',\n    participants: [{\n      userId: 1,\n      status: 'paid',\n      paidAt: '2025-01-16'\n    }, {\n      userId: 2,\n      status: 'pending'\n    }, {\n      userId: 3,\n      status: 'paid',\n      paidAt: '2025-01-17'\n    }],\n    splitType: 'equal',\n    customSplits: {},\n    createdAt: '2025-01-15',\n    lastMatched: '2025-01-15',\n    frequency: 'monthly',\n    nextDue: '2025-02-15'\n  }, {\n    id: 2,\n    name: 'Electric Utility',\n    amount: 127.45,\n    isRecurring: true,\n    plaidMatch: 'Electric Company',\n    participants: [{\n      userId: 1,\n      status: 'paid',\n      paidAt: '2025-01-09'\n    }, {\n      userId: 2,\n      status: 'paid',\n      paidAt: '2025-01-10'\n    }, {\n      userId: 4,\n      status: 'overdue'\n    }],\n    splitType: 'equal',\n    customSplits: {},\n    createdAt: '2024-12-08',\n    lastMatched: '2025-01-08',\n    frequency: 'monthly',\n    nextDue: '2025-02-08'\n  }, {\n    id: 3,\n    name: 'Spotify Premium',\n    amount: 9.99,\n    isRecurring: true,\n    plaidMatch: 'Spotify',\n    participants: [{\n      userId: 1,\n      status: 'paid',\n      paidAt: '2025-01-10'\n    }, {\n      userId: 2,\n      status: 'paid',\n      paidAt: '2025-01-10'\n    }, {\n      userId: 3,\n      status: 'paid',\n      paidAt: '2025-01-11'\n    }, {\n      userId: 4,\n      status: 'pending'\n    }],\n    splitType: 'equal',\n    customSplits: {},\n    createdAt: '2024-12-10',\n    lastMatched: '2025-01-10',\n    frequency: 'monthly',\n    nextDue: '2025-02-10'\n  }, {\n    id: 4,\n    name: 'Dinner at Italian Restaurant',\n    amount: 85.50,\n    isRecurring: false,\n    participants: [{\n      userId: 1,\n      status: 'paid',\n      paidAt: '2025-01-12'\n    }, {\n      userId: 2,\n      status: 'pending'\n    }, {\n      userId: 3,\n      status: 'pending'\n    }],\n    splitType: 'equal',\n    customSplits: {},\n    createdAt: '2025-01-12'\n  }]);\n  const [bankTransactions, setBankTransactions] = useState([]);\n  const [plaidAccessToken, setPlaidAccessToken] = useState(null);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n  const addParticipant = participant => {\n    const newParticipant = {\n      ...participant,\n      id: Date.now(),\n      avatar: participant.name.split(' ').map(n => n[0]).join('').toUpperCase()\n    };\n    setParticipants(prev => [...prev, newParticipant]);\n    return newParticipant;\n  };\n  const removeParticipant = id => {\n    setParticipants(prev => prev.filter(p => p.id !== id));\n    setCosts(prev => prev.map(cost => ({\n      ...cost,\n      participants: cost.participants.filter(p => p.userId !== id)\n    })));\n  };\n  const addCost = costData => {\n    const newCost = {\n      ...costData,\n      id: Date.now(),\n      createdAt: new Date().toISOString().split('T')[0]\n    };\n    setCosts(prev => [...prev, newCost]);\n    return newCost;\n  };\n  const updateCost = (id, updates) => {\n    setCosts(prev => prev.map(cost => cost.id === id ? {\n      ...cost,\n      ...updates\n    } : cost));\n  };\n  const connectPlaid = async () => {\n    try {\n      setIsLoadingTransactions(true);\n      const publicToken = await plaidAPI.createPublicToken();\n      const accessToken = await plaidAPI.exchangePublicToken(publicToken);\n      setPlaidAccessToken(accessToken);\n      const endDate = new Date().toISOString().split('T')[0];\n      const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      const transactions = await plaidAPI.getTransactions(accessToken, startDate, endDate);\n      const formattedTransactions = transactions.map(t => {\n        var _t$category;\n        return {\n          id: t.transaction_id,\n          description: t.name,\n          amount: Math.abs(t.amount),\n          date: t.date,\n          category: ((_t$category = t.category) === null || _t$category === void 0 ? void 0 : _t$category[0]) || 'Other',\n          merchant: t.merchant_name,\n          matched: false\n        };\n      });\n      setBankTransactions(formattedTransactions);\n    } catch (error) {\n      console.error('Error connecting to Plaid:', error);\n      alert('Error connecting to bank. Using demo data instead.');\n      setBankTransactions([{\n        id: 1,\n        description: 'Netflix',\n        amount: 15.99,\n        date: '2025-01-15',\n        matched: true,\n        category: 'Entertainment'\n      }, {\n        id: 2,\n        description: 'Netflix',\n        amount: 18.99,\n        date: '2024-12-15',\n        matched: true,\n        category: 'Entertainment'\n      }, {\n        id: 3,\n        description: 'Spotify Premium',\n        amount: 9.99,\n        date: '2025-01-10',\n        matched: true,\n        category: 'Entertainment'\n      }, {\n        id: 4,\n        description: 'Electric Company',\n        amount: 187.45,\n        date: '2025-01-08',\n        matched: true,\n        category: 'Utilities'\n      }, {\n        id: 5,\n        description: 'Electric Company',\n        amount: 127.45,\n        date: '2024-12-08',\n        matched: true,\n        category: 'Utilities'\n      }, {\n        id: 6,\n        description: 'Internet Service Provider',\n        amount: 89.99,\n        date: '2025-01-05',\n        matched: true,\n        category: 'Utilities'\n      }, {\n        id: 7,\n        description: 'Disney Plus',\n        amount: 7.99,\n        date: '2025-01-12',\n        matched: false,\n        category: 'Entertainment'\n      }, {\n        id: 8,\n        description: 'Amazon Prime',\n        amount: 14.99,\n        date: '2025-01-08',\n        matched: false,\n        category: 'Shopping'\n      }]);\n    } finally {\n      setIsLoadingTransactions(false);\n    }\n  };\n  const value = {\n    participants,\n    costs,\n    bankTransactions,\n    plaidAccessToken,\n    isLoadingTransactions,\n    addParticipant,\n    removeParticipant,\n    addCost,\n    updateCost,\n    connectPlaid\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"8ejeXgYHXj8hvubQNyf9nNO2kaY=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};\n_s2(useData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","useState","createContext","useContext","plaidAPI","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","participants","setParticipants","id","name","email","avatar","costs","setCosts","amount","isRecurring","plaidMatch","userId","status","paidAt","splitType","customSplits","createdAt","lastMatched","frequency","nextDue","bankTransactions","setBankTransactions","plaidAccessToken","setPlaidAccessToken","isLoadingTransactions","setIsLoadingTransactions","addParticipant","participant","newParticipant","Date","now","split","map","n","join","toUpperCase","prev","removeParticipant","filter","p","cost","addCost","costData","newCost","toISOString","updateCost","updates","connectPlaid","publicToken","createPublicToken","accessToken","exchangePublicToken","endDate","startDate","transactions","getTransactions","formattedTransactions","t","_t$category","transaction_id","description","Math","abs","date","category","merchant","merchant_name","matched","error","console","alert","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/jared/programming/professional/shared-costs/App/src/contexts/DataContext.js"],"sourcesContent":["import React, { useState, createContext, useContext } from 'react';\nimport { plaidAPI } from '../services/plaidService';\n\nconst DataContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n  const [participants, setParticipants] = useState([\n    { id: 1, name: 'John Doe', email: 'john@example.com', avatar: 'JD' },\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com', avatar: 'JS' },\n    { id: 3, name: 'Mike Johnson', email: 'mike@example.com', avatar: 'MJ' },\n    { id: 4, name: 'Sarah Wilson', email: 'sarah@example.com', avatar: 'SW' }\n  ]);\n\n  const [costs, setCosts] = useState([\n    {\n      id: 1,\n      name: 'Netflix Subscription',\n      amount: 15.99,\n      isRecurring: true,\n      plaidMatch: 'Netflix',\n      participants: [\n        { userId: 1, status: 'paid', paidAt: '2025-01-16' },\n        { userId: 2, status: 'pending' },\n        { userId: 3, status: 'paid', paidAt: '2025-01-17' }\n      ],\n      splitType: 'equal',\n      customSplits: {},\n      createdAt: '2025-01-15',\n      lastMatched: '2025-01-15',\n      frequency: 'monthly',\n      nextDue: '2025-02-15'\n    },\n    {\n      id: 2,\n      name: 'Electric Utility',\n      amount: 127.45,\n      isRecurring: true,\n      plaidMatch: 'Electric Company',\n      participants: [\n        { userId: 1, status: 'paid', paidAt: '2025-01-09' },\n        { userId: 2, status: 'paid', paidAt: '2025-01-10' },\n        { userId: 4, status: 'overdue' }\n      ],\n      splitType: 'equal',\n      customSplits: {},\n      createdAt: '2024-12-08',\n      lastMatched: '2025-01-08',\n      frequency: 'monthly',\n      nextDue: '2025-02-08'\n    },\n    {\n      id: 3,\n      name: 'Spotify Premium',\n      amount: 9.99,\n      isRecurring: true,\n      plaidMatch: 'Spotify',\n      participants: [\n        { userId: 1, status: 'paid', paidAt: '2025-01-10' },\n        { userId: 2, status: 'paid', paidAt: '2025-01-10' },\n        { userId: 3, status: 'paid', paidAt: '2025-01-11' },\n        { userId: 4, status: 'pending' }\n      ],\n      splitType: 'equal',\n      customSplits: {},\n      createdAt: '2024-12-10',\n      lastMatched: '2025-01-10',\n      frequency: 'monthly',\n      nextDue: '2025-02-10'\n    },\n    {\n      id: 4,\n      name: 'Dinner at Italian Restaurant',\n      amount: 85.50,\n      isRecurring: false,\n      participants: [\n        { userId: 1, status: 'paid', paidAt: '2025-01-12' },\n        { userId: 2, status: 'pending' },\n        { userId: 3, status: 'pending' }\n      ],\n      splitType: 'equal',\n      customSplits: {},\n      createdAt: '2025-01-12'\n    }\n  ]);\n\n  const [bankTransactions, setBankTransactions] = useState([]);\n  const [plaidAccessToken, setPlaidAccessToken] = useState(null);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n\n  const addParticipant = (participant) => {\n    const newParticipant = {\n      ...participant,\n      id: Date.now(),\n      avatar: participant.name.split(' ').map(n => n[0]).join('').toUpperCase()\n    };\n    setParticipants(prev => [...prev, newParticipant]);\n    return newParticipant;\n  };\n\n  const removeParticipant = (id) => {\n    setParticipants(prev => prev.filter(p => p.id !== id));\n    setCosts(prev => prev.map(cost => ({\n      ...cost,\n      participants: cost.participants.filter(p => p.userId !== id)\n    })));\n  };\n\n  const addCost = (costData) => {\n    const newCost = {\n      ...costData,\n      id: Date.now(),\n      createdAt: new Date().toISOString().split('T')[0]\n    };\n    setCosts(prev => [...prev, newCost]);\n    return newCost;\n  };\n\n  const updateCost = (id, updates) => {\n    setCosts(prev => prev.map(cost => \n      cost.id === id ? { ...cost, ...updates } : cost\n    ));\n  };\n\n  const connectPlaid = async () => {\n    try {\n      setIsLoadingTransactions(true);\n      \n      const publicToken = await plaidAPI.createPublicToken();\n      const accessToken = await plaidAPI.exchangePublicToken(publicToken);\n      setPlaidAccessToken(accessToken);\n      \n      const endDate = new Date().toISOString().split('T')[0];\n      const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      \n      const transactions = await plaidAPI.getTransactions(accessToken, startDate, endDate);\n      \n      const formattedTransactions = transactions.map(t => ({\n        id: t.transaction_id,\n        description: t.name,\n        amount: Math.abs(t.amount),\n        date: t.date,\n        category: t.category?.[0] || 'Other',\n        merchant: t.merchant_name,\n        matched: false\n      }));\n      \n      setBankTransactions(formattedTransactions);\n      \n    } catch (error) {\n      console.error('Error connecting to Plaid:', error);\n      alert('Error connecting to bank. Using demo data instead.');\n      \n      setBankTransactions([\n        { id: 1, description: 'Netflix', amount: 15.99, date: '2025-01-15', matched: true, category: 'Entertainment' },\n        { id: 2, description: 'Netflix', amount: 18.99, date: '2024-12-15', matched: true, category: 'Entertainment' },\n        { id: 3, description: 'Spotify Premium', amount: 9.99, date: '2025-01-10', matched: true, category: 'Entertainment' },\n        { id: 4, description: 'Electric Company', amount: 187.45, date: '2025-01-08', matched: true, category: 'Utilities' },\n        { id: 5, description: 'Electric Company', amount: 127.45, date: '2024-12-08', matched: true, category: 'Utilities' },\n        { id: 6, description: 'Internet Service Provider', amount: 89.99, date: '2025-01-05', matched: true, category: 'Utilities' },\n        { id: 7, description: 'Disney Plus', amount: 7.99, date: '2025-01-12', matched: false, category: 'Entertainment' },\n        { id: 8, description: 'Amazon Prime', amount: 14.99, date: '2025-01-08', matched: false, category: 'Shopping' }\n      ]);\n    } finally {\n      setIsLoadingTransactions(false);\n    }\n  };\n\n  const value = {\n    participants,\n    costs,\n    bankTransactions,\n    plaidAccessToken,\n    isLoadingTransactions,\n    addParticipant,\n    removeParticipant,\n    addCost,\n    updateCost,\n    connectPlaid\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAClE,SAASC,QAAQ,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAC/C;IAAEY,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE,kBAAkB;IAAEC,MAAM,EAAE;EAAK,CAAC,EACpE;IAAEH,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,YAAY;IAAEC,KAAK,EAAE,kBAAkB;IAAEC,MAAM,EAAE;EAAK,CAAC,EACtE;IAAEH,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,cAAc;IAAEC,KAAK,EAAE,kBAAkB;IAAEC,MAAM,EAAE;EAAK,CAAC,EACxE;IAAEH,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,cAAc;IAAEC,KAAK,EAAE,mBAAmB;IAAEC,MAAM,EAAE;EAAK,CAAC,CAC1E,CAAC;EAEF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,CACjC;IACEY,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,sBAAsB;IAC5BK,MAAM,EAAE,KAAK;IACbC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,SAAS;IACrBV,YAAY,EAAE,CACZ;MAAEW,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAa,CAAC,EACnD;MAAEF,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAU,CAAC,EAChC;MAAED,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAa,CAAC,CACpD;IACDC,SAAS,EAAE,OAAO;IAClBC,YAAY,EAAE,CAAC,CAAC;IAChBC,SAAS,EAAE,YAAY;IACvBC,WAAW,EAAE,YAAY;IACzBC,SAAS,EAAE,SAAS;IACpBC,OAAO,EAAE;EACX,CAAC,EACD;IACEjB,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,kBAAkB;IACxBK,MAAM,EAAE,MAAM;IACdC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,kBAAkB;IAC9BV,YAAY,EAAE,CACZ;MAAEW,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAa,CAAC,EACnD;MAAEF,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAa,CAAC,EACnD;MAAEF,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAU,CAAC,CACjC;IACDE,SAAS,EAAE,OAAO;IAClBC,YAAY,EAAE,CAAC,CAAC;IAChBC,SAAS,EAAE,YAAY;IACvBC,WAAW,EAAE,YAAY;IACzBC,SAAS,EAAE,SAAS;IACpBC,OAAO,EAAE;EACX,CAAC,EACD;IACEjB,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,iBAAiB;IACvBK,MAAM,EAAE,IAAI;IACZC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,SAAS;IACrBV,YAAY,EAAE,CACZ;MAAEW,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAa,CAAC,EACnD;MAAEF,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAa,CAAC,EACnD;MAAEF,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAa,CAAC,EACnD;MAAEF,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAU,CAAC,CACjC;IACDE,SAAS,EAAE,OAAO;IAClBC,YAAY,EAAE,CAAC,CAAC;IAChBC,SAAS,EAAE,YAAY;IACvBC,WAAW,EAAE,YAAY;IACzBC,SAAS,EAAE,SAAS;IACpBC,OAAO,EAAE;EACX,CAAC,EACD;IACEjB,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,8BAA8B;IACpCK,MAAM,EAAE,KAAK;IACbC,WAAW,EAAE,KAAK;IAClBT,YAAY,EAAE,CACZ;MAAEW,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAa,CAAC,EACnD;MAAEF,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAU,CAAC,EAChC;MAAED,MAAM,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAU,CAAC,CACjC;IACDE,SAAS,EAAE,OAAO;IAClBC,YAAY,EAAE,CAAC,CAAC;IAChBC,SAAS,EAAE;EACb,CAAC,CACF,CAAC;EAEF,MAAM,CAACI,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACgC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACkC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EAEzE,MAAMoC,cAAc,GAAIC,WAAW,IAAK;IACtC,MAAMC,cAAc,GAAG;MACrB,GAAGD,WAAW;MACdzB,EAAE,EAAE2B,IAAI,CAACC,GAAG,CAAC,CAAC;MACdzB,MAAM,EAAEsB,WAAW,CAACxB,IAAI,CAAC4B,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC;IAC1E,CAAC;IACDlC,eAAe,CAACmC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAER,cAAc,CAAC,CAAC;IAClD,OAAOA,cAAc;EACvB,CAAC;EAED,MAAMS,iBAAiB,GAAInC,EAAE,IAAK;IAChCD,eAAe,CAACmC,IAAI,IAAIA,IAAI,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKA,EAAE,CAAC,CAAC;IACtDK,QAAQ,CAAC6B,IAAI,IAAIA,IAAI,CAACJ,GAAG,CAACQ,IAAI,KAAK;MACjC,GAAGA,IAAI;MACPxC,YAAY,EAAEwC,IAAI,CAACxC,YAAY,CAACsC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC5B,MAAM,KAAKT,EAAE;IAC7D,CAAC,CAAC,CAAC,CAAC;EACN,CAAC;EAED,MAAMuC,OAAO,GAAIC,QAAQ,IAAK;IAC5B,MAAMC,OAAO,GAAG;MACd,GAAGD,QAAQ;MACXxC,EAAE,EAAE2B,IAAI,CAACC,GAAG,CAAC,CAAC;MACdd,SAAS,EAAE,IAAIa,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC,CAACb,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,CAAC;IACDxB,QAAQ,CAAC6B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEO,OAAO,CAAC,CAAC;IACpC,OAAOA,OAAO;EAChB,CAAC;EAED,MAAME,UAAU,GAAGA,CAAC3C,EAAE,EAAE4C,OAAO,KAAK;IAClCvC,QAAQ,CAAC6B,IAAI,IAAIA,IAAI,CAACJ,GAAG,CAACQ,IAAI,IAC5BA,IAAI,CAACtC,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGsC,IAAI;MAAE,GAAGM;IAAQ,CAAC,GAAGN,IAC7C,CAAC,CAAC;EACJ,CAAC;EAED,MAAMO,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFtB,wBAAwB,CAAC,IAAI,CAAC;MAE9B,MAAMuB,WAAW,GAAG,MAAMvD,QAAQ,CAACwD,iBAAiB,CAAC,CAAC;MACtD,MAAMC,WAAW,GAAG,MAAMzD,QAAQ,CAAC0D,mBAAmB,CAACH,WAAW,CAAC;MACnEzB,mBAAmB,CAAC2B,WAAW,CAAC;MAEhC,MAAME,OAAO,GAAG,IAAIvB,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC,CAACb,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtD,MAAMsB,SAAS,GAAG,IAAIxB,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACc,WAAW,CAAC,CAAC,CAACb,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAE7F,MAAMuB,YAAY,GAAG,MAAM7D,QAAQ,CAAC8D,eAAe,CAACL,WAAW,EAAEG,SAAS,EAAED,OAAO,CAAC;MAEpF,MAAMI,qBAAqB,GAAGF,YAAY,CAACtB,GAAG,CAACyB,CAAC;QAAA,IAAAC,WAAA;QAAA,OAAK;UACnDxD,EAAE,EAAEuD,CAAC,CAACE,cAAc;UACpBC,WAAW,EAAEH,CAAC,CAACtD,IAAI;UACnBK,MAAM,EAAEqD,IAAI,CAACC,GAAG,CAACL,CAAC,CAACjD,MAAM,CAAC;UAC1BuD,IAAI,EAAEN,CAAC,CAACM,IAAI;UACZC,QAAQ,EAAE,EAAAN,WAAA,GAAAD,CAAC,CAACO,QAAQ,cAAAN,WAAA,uBAAVA,WAAA,CAAa,CAAC,CAAC,KAAI,OAAO;UACpCO,QAAQ,EAAER,CAAC,CAACS,aAAa;UACzBC,OAAO,EAAE;QACX,CAAC;MAAA,CAAC,CAAC;MAEH9C,mBAAmB,CAACmC,qBAAqB,CAAC;IAE5C,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDE,KAAK,CAAC,oDAAoD,CAAC;MAE3DjD,mBAAmB,CAAC,CAClB;QAAEnB,EAAE,EAAE,CAAC;QAAE0D,WAAW,EAAE,SAAS;QAAEpD,MAAM,EAAE,KAAK;QAAEuD,IAAI,EAAE,YAAY;QAAEI,OAAO,EAAE,IAAI;QAAEH,QAAQ,EAAE;MAAgB,CAAC,EAC9G;QAAE9D,EAAE,EAAE,CAAC;QAAE0D,WAAW,EAAE,SAAS;QAAEpD,MAAM,EAAE,KAAK;QAAEuD,IAAI,EAAE,YAAY;QAAEI,OAAO,EAAE,IAAI;QAAEH,QAAQ,EAAE;MAAgB,CAAC,EAC9G;QAAE9D,EAAE,EAAE,CAAC;QAAE0D,WAAW,EAAE,iBAAiB;QAAEpD,MAAM,EAAE,IAAI;QAAEuD,IAAI,EAAE,YAAY;QAAEI,OAAO,EAAE,IAAI;QAAEH,QAAQ,EAAE;MAAgB,CAAC,EACrH;QAAE9D,EAAE,EAAE,CAAC;QAAE0D,WAAW,EAAE,kBAAkB;QAAEpD,MAAM,EAAE,MAAM;QAAEuD,IAAI,EAAE,YAAY;QAAEI,OAAO,EAAE,IAAI;QAAEH,QAAQ,EAAE;MAAY,CAAC,EACpH;QAAE9D,EAAE,EAAE,CAAC;QAAE0D,WAAW,EAAE,kBAAkB;QAAEpD,MAAM,EAAE,MAAM;QAAEuD,IAAI,EAAE,YAAY;QAAEI,OAAO,EAAE,IAAI;QAAEH,QAAQ,EAAE;MAAY,CAAC,EACpH;QAAE9D,EAAE,EAAE,CAAC;QAAE0D,WAAW,EAAE,2BAA2B;QAAEpD,MAAM,EAAE,KAAK;QAAEuD,IAAI,EAAE,YAAY;QAAEI,OAAO,EAAE,IAAI;QAAEH,QAAQ,EAAE;MAAY,CAAC,EAC5H;QAAE9D,EAAE,EAAE,CAAC;QAAE0D,WAAW,EAAE,aAAa;QAAEpD,MAAM,EAAE,IAAI;QAAEuD,IAAI,EAAE,YAAY;QAAEI,OAAO,EAAE,KAAK;QAAEH,QAAQ,EAAE;MAAgB,CAAC,EAClH;QAAE9D,EAAE,EAAE,CAAC;QAAE0D,WAAW,EAAE,cAAc;QAAEpD,MAAM,EAAE,KAAK;QAAEuD,IAAI,EAAE,YAAY;QAAEI,OAAO,EAAE,KAAK;QAAEH,QAAQ,EAAE;MAAW,CAAC,CAChH,CAAC;IACJ,CAAC,SAAS;MACRvC,wBAAwB,CAAC,KAAK,CAAC;IACjC;EACF,CAAC;EAED,MAAM8C,KAAK,GAAG;IACZvE,YAAY;IACZM,KAAK;IACLc,gBAAgB;IAChBE,gBAAgB;IAChBE,qBAAqB;IACrBE,cAAc;IACdW,iBAAiB;IACjBI,OAAO;IACPI,UAAU;IACVE;EACF,CAAC;EAED,oBACEpD,OAAA,CAACC,WAAW,CAAC4E,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzE,QAAA,EAChCA;EAAQ;IAAA2E,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC7E,EAAA,CApLWF,YAAY;AAAAgF,EAAA,GAAZhF,YAAY;AAsLzB,OAAO,MAAMiF,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGxF,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACoF,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}