{"ast":null,"code":"const PLAID_CONFIG = {\n  clientId: '686ee94862386b0024d2cbcd',\n  secret: 'c18250107468c87adf2934e95d0358',\n  baseUrl: 'https://sandbox.plaid.com'\n};\nexport const plaidAPI = {\n  async createPublicToken() {\n    try {\n      const response = await fetch(`${PLAID_CONFIG.baseUrl}/sandbox/public_token/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          client_id: PLAID_CONFIG.clientId,\n          secret: PLAID_CONFIG.secret,\n          institution_id: 'ins_109508',\n          initial_products: ['transactions'],\n          public_key: 'sandbox'\n        })\n      });\n      const data = await response.json();\n      return data.public_token;\n    } catch (error) {\n      console.error('Error creating public token:', error);\n      throw error;\n    }\n  },\n  async exchangePublicToken(publicToken) {\n    try {\n      const response = await fetch(`${PLAID_CONFIG.baseUrl}/link/token/exchange`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          client_id: PLAID_CONFIG.clientId,\n          secret: PLAID_CONFIG.secret,\n          public_token: publicToken\n        })\n      });\n      const data = await response.json();\n      return data.access_token;\n    } catch (error) {\n      console.error('Error exchanging public token:', error);\n      throw error;\n    }\n  },\n  async getTransactions(accessToken, startDate, endDate) {\n    try {\n      const response = await fetch(`${PLAID_CONFIG.baseUrl}/transactions/get`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          client_id: PLAID_CONFIG.clientId,\n          secret: PLAID_CONFIG.secret,\n          access_token: accessToken,\n          start_date: startDate,\n          end_date: endDate,\n          count: 100\n        })\n      });\n      const data = await response.json();\n      return data.transactions || [];\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["PLAID_CONFIG","clientId","secret","baseUrl","plaidAPI","createPublicToken","response","fetch","method","headers","body","JSON","stringify","client_id","institution_id","initial_products","public_key","data","json","public_token","error","console","exchangePublicToken","publicToken","access_token","getTransactions","accessToken","startDate","endDate","start_date","end_date","count","transactions"],"sources":["C:/Users/jared/programming/professional/shared-costs/App/src/services/plaidService.js"],"sourcesContent":["const PLAID_CONFIG = {\n  clientId: '686ee94862386b0024d2cbcd',\n  secret: 'c18250107468c87adf2934e95d0358',\n  baseUrl: 'https://sandbox.plaid.com'\n};\n\nexport const plaidAPI = {\n  async createPublicToken() {\n    try {\n      const response = await fetch(`${PLAID_CONFIG.baseUrl}/sandbox/public_token/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          client_id: PLAID_CONFIG.clientId,\n          secret: PLAID_CONFIG.secret,\n          institution_id: 'ins_109508',\n          initial_products: ['transactions'],\n          public_key: 'sandbox'\n        })\n      });\n      \n      const data = await response.json();\n      return data.public_token;\n    } catch (error) {\n      console.error('Error creating public token:', error);\n      throw error;\n    }\n  },\n\n  async exchangePublicToken(publicToken) {\n    try {\n      const response = await fetch(`${PLAID_CONFIG.baseUrl}/link/token/exchange`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          client_id: PLAID_CONFIG.clientId,\n          secret: PLAID_CONFIG.secret,\n          public_token: publicToken\n        })\n      });\n      \n      const data = await response.json();\n      return data.access_token;\n    } catch (error) {\n      console.error('Error exchanging public token:', error);\n      throw error;\n    }\n  },\n\n  async getTransactions(accessToken, startDate, endDate) {\n    try {\n      const response = await fetch(`${PLAID_CONFIG.baseUrl}/transactions/get`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          client_id: PLAID_CONFIG.clientId,\n          secret: PLAID_CONFIG.secret,\n          access_token: accessToken,\n          start_date: startDate,\n          end_date: endDate,\n          count: 100\n        })\n      });\n      \n      const data = await response.json();\n      return data.transactions || [];\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACnBC,QAAQ,EAAE,0BAA0B;EACpCC,MAAM,EAAE,gCAAgC;EACxCC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG;EACtB,MAAMC,iBAAiBA,CAAA,EAAG;IACxB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,CAACG,OAAO,8BAA8B,EAAE;QAClFK,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,SAAS,EAAEb,YAAY,CAACC,QAAQ;UAChCC,MAAM,EAAEF,YAAY,CAACE,MAAM;UAC3BY,cAAc,EAAE,YAAY;UAC5BC,gBAAgB,EAAE,CAAC,cAAc,CAAC;UAClCC,UAAU,EAAE;QACd,CAAC;MACH,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,YAAY;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAME,mBAAmBA,CAACC,WAAW,EAAE;IACrC,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,CAACG,OAAO,sBAAsB,EAAE;QAC1EK,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,SAAS,EAAEb,YAAY,CAACC,QAAQ;UAChCC,MAAM,EAAEF,YAAY,CAACE,MAAM;UAC3BiB,YAAY,EAAEI;QAChB,CAAC;MACH,CAAC,CAAC;MAEF,MAAMN,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACO,YAAY;IAC1B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMK,eAAeA,CAACC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACrD,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,CAACG,OAAO,mBAAmB,EAAE;QACvEK,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,SAAS,EAAEb,YAAY,CAACC,QAAQ;UAChCC,MAAM,EAAEF,YAAY,CAACE,MAAM;UAC3BsB,YAAY,EAAEE,WAAW;UACzBG,UAAU,EAAEF,SAAS;UACrBG,QAAQ,EAAEF,OAAO;UACjBG,KAAK,EAAE;QACT,CAAC;MACH,CAAC,CAAC;MAEF,MAAMd,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACe,YAAY,IAAI,EAAE;IAChC,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}